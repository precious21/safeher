<beans xmlns:beans="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:mongo="http://www.springframework.org/schema/data/mongo"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:p="http://www.springframework.org/schema/p"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                            http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                            http://www.springframework.org/schema/mvc
       						http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
       						http://www.springframework.org/schema/data/mongo
       						http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd">
       						
<!-- ******************************************************************** -->
	<!-- Enable Annotations and base package scanned by Spring -->
	<!-- ******************************************************************** -->
	
	
    <context:component-scan base-package="com.tgi.safeher" />

    <context:annotation-config /> 
    
     <mvc:annotation-driven />
     
    <mongo:repositories base-package="com.tgi.safeher.repo" repository-impl-postfix="Repository" />
    
    <mongo:mongo id="mongo" host="${safeHerApp.MONGO_IP}" port="${safeHerApp.MONGO_PORT}" />
    

  <bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
    <constructor-arg ref="mongo" />
    <constructor-arg value="${safeHerApp.MONGODB_NAME}" />
  </bean>

	<bean id="persistenceExceptionTranslationPostProcessor"
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
    <bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
					<property name="objectMapper">
						<ref bean="JacksonObjectMapper" />
					</property>
				</bean>
				
			</list>
		</property>
	</bean>
		
	<bean id="jsonConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes" value="application/json" />

	</bean>
	
	
	<bean id="JacksonObjectMapper" class="org.codehaus.jackson.map.ObjectMapper" />
	<bean id="JacksonSerializationConfig" class="org.codehaus.jackson.map.SerializationConfig"
		factory-bean="JacksonObjectMapper" factory-method="getSerializationConfig" />
	
	<bean id="multipartResolver"
	class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>
    <import resource="classpath:hibernate/hibernate-config.xml" />
   <!--  <import resource="classpath:spring/safeher-spring-persistence.xml" /> -->

<!--     <bean name="userController" class="" /> -->

	<!--
		Our test service bean
	-->
	<bean id="socketManager" class="com.tgi.safeher.service.manager.impl.SocketManager"/> 
	
	<bean class="com.tgi.safeher.utils.ApplicationContaxtAwareUtil" />


	
	
	<!--
		 Job Detail bean configuration specifies the target object (our service object defined above)
		 and the method we want to invoke on that object (testServiceMethod). The concurrent property
		 specifies whether or not multiple instances of this job can be invoked concurrently
	-->
    <bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="socketManager" />
        <property name="targetMethod" value="saveDriverLocationSocket" />
        <property name="concurrent" value="true" />
        
    </bean>

	<bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
    <!-- see the example of method invoking job above -->
    <property name="jobDetail" ref="jobDetail"/>
    <!-- 10 seconds -->
    <property name="startDelay" value="1000"/>
    <!-- repeat every 50 seconds -->
    <property name="repeatInterval" value="50000"/>
    <property name="repeatCount" value="0"></property>
    
	</bean>
	
	<!--
		The cron trigger bean allows us to specify the job that we want to invoke (jobDetail above)
		and a cron expression that defines when the job should be invoked. My configuration below
		will be invoked every 10 seconds
	-->
   <!--  <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="jobDetail" />
        <property name="cronExpression" value="0,10,20,30,40,50 * * * * ?" />
    </bean> -->

	<!--
		The SchedulerFactoryBean takes a list of cron triggers - our example has just one
		cron trigger but larger enterprise applications will typically have a number of different
		cron trigger for different jobs. The quartz properties property allows you to specify
		some specific quartz properties. In our simple example we tell Quartz not to check for updates
	-->
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
              <!--   <ref bean="cronTrigger" /> -->
              <ref bean="simpleTrigger" />
            </list>
        </property>
        <property name="quartzProperties">
			<props>
            	<prop key="org.quartz.scheduler.skipUpdateCheck">true</prop>
        	</props>
		</property>
    </bean>
    
	 <!-- Redis Connection Factory -->
    <bean id="jedisConnFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
            p:use-pool="true" p:hostName="${safeHerApp.REDIS_IP}" p:port="${safeHerApp.REDIS_PORT}"  />
    <!-- Redis Template -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
            p:connection-factory-ref="jedisConnFactory"  />   

</beans>